// collectd - proto/collectd.proto
// Copyright (C) 2015-2016 Sebastian Harl
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Authors:
//   Sebastian Harl <sh at tokkee.org>

syntax = "proto3";

package collectd;
option go_package = "collectd.org/rpc/proto";

import "types.proto";

service Collectd {
  // PutValues reads the value lists from the PutValuesRequest stream.
  // The gRPC server embedded into collectd will inject them into the system
  // just like the network plugin.
  rpc PutValues(stream PutValuesRequest) returns(PutValuesResponse);

  // QueryValues returns a stream of matching value lists from collectd's
  // internal cache.
  rpc QueryValues(QueryValuesRequest) returns(stream QueryValuesResponse);
}

// The arguments to PutValues.
message PutValuesRequest {
  // value_list is the metric to be sent to the server.
  collectd.types.ValueList value_list = 1;
}

// The response from PutValues.
message PutValuesResponse {}

// The arguments to QueryValues.
message QueryValuesRequest {
  // Query by the fields of the identifier. Only return values matching the
  // specified shell wildcard patterns (see fnmatch(3)). Use '*' to match
  // any value.
  collectd.types.Identifier identifier = 1;
}

// The response from QueryValues.
message QueryValuesResponse { collectd.types.ValueList value_list = 1; }
