# Pre-defined queries of collectd's postgresql plugin.
#
# Do not edit this file. If you want to change any of the query definitions,
# overwrite them in collectd.conf instead.
#
# This file is distributed under the same terms as collectd itself.

<Query backends>
	Statement "SELECT count(*) AS count \
		FROM pg_stat_activity \
		WHERE datname = $1;"

	Param database

	<Result>
		Type "gauge"
		Metric "pg_numbackends"
		ValueFrom "count"
	</Result>
</Query>

<Query transactions>
	Statement "SELECT xact_commit, xact_rollback \
		FROM pg_stat_database \
		WHERE datname = $1;"

	Param database

	<Result>
		Type "counter"
		Metric "pg_xact_commit_total"
		ValueFrom "xact_commit"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_xact_rollback_total"
		ValueFrom "xact_rollback"
	</Result>
</Query>

<Query queries>
	Statement "SELECT coalesce(sum(n_tup_ins), 0) AS ins, \
			coalesce(sum(n_tup_upd), 0) AS upd, \
			coalesce(sum(n_tup_del), 0) AS del \
		FROM pg_stat_user_tables;"

	<Result>
		Type "counter"
		Metric "pg_n_tup_ins_total"
		ValueFrom "ins"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_n_tup_upd_total"
		ValueFrom "upd"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_n_tup_del_total"
		ValueFrom "del"
	</Result>

	MaxVersion 80299
</Query>

<Query queries>
	Statement "SELECT coalesce(sum(n_tup_ins), 0) AS ins, \
			coalesce(sum(n_tup_upd), 0) AS upd, \
			coalesce(sum(n_tup_del), 0) AS del, \
			coalesce(sum(n_tup_hot_upd), 0) AS hot_upd \
		FROM pg_stat_user_tables;"

	<Result>
		Type "counter"
		Metric "pg_n_tup_ins_total"
		ValueFrom "ins"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_n_tup_upd_total"
		ValueFrom "upd"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_n_tup_del_total"
		ValueFrom "del"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_n_tup_hot_upd_total"
		ValueFrom "hot_upd"
	</Result>

	MinVersion 80300
</Query>

<Query queries_by_table>
	Statement "SELECT schemaname, relname, \
			n_tup_ins AS ins, \
			n_tup_upd AS upd, \
			n_tup_del AS del \
		FROM pg_stat_user_tables;"

	<Result>
		Type "counter"
		Metric "pg_n_tup_ins_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "ins"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_n_tup_upd_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "upd"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_n_tup_del_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "del"
	</Result>

	MaxVersion 80299
</Query>

<Query queries_by_table>
	Statement "SELECT schemaname, relname, \
			n_tup_ins AS ins, \
			n_tup_upd AS upd, \
			n_tup_del AS del, \
			n_tup_hot_upd AS hot_upd \
		FROM pg_stat_user_tables;"

	<Result>
		Type "counter"
		Metric "pg_n_tup_ins_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "ins"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_n_tup_upd_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "upd"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_n_tup_del_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "del"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_n_tup_hot_upd_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "hot_upd"
	</Result>

	MinVersion 80300
</Query>

<Query query_plans>
	Statement "SELECT coalesce(sum(seq_scan), 0) AS seq, \
			  coalesce(sum(seq_tup_read), 0) AS seq_tup_read, \
			  coalesce(sum(idx_scan), 0) AS idx, \
			  coalesce(sum(idx_tup_fetch), 0) AS idx_tup_fetch \
		FROM pg_stat_user_tables;"

	<Result>
		Type "counter"
		Metric "pg_scan_seq_total"
		ValueFrom "seq"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_scan_seq_tup_read_total"
		ValueFrom "seq_tup_read"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_scan_idx_total"
		ValueFrom "idx"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_scan_idx_tup_fetch_total"
		ValueFrom "idx_tup_fetch"
	</Result>
</Query>

<Query table_states>
	Statement "SELECT coalesce(sum(n_live_tup), 0) AS live, \
		coalesce(sum(n_dead_tup), 0) AS dead \
		FROM pg_stat_user_tables;"

	<Result>
		Type "gauge"
		Metric "pg_n_tup_live"
		ValueFrom "live"
	</Result>
	<Result>
		Type "gauge"
		Metric "pg_n_tup_dead"
		ValueFrom "dead"
	</Result>

	MinVersion 80300
</Query>

<Query query_plans_by_table>
	Statement "SELECT schemaname, relname, \
			coalesce(seq_scan, 0) AS seq, \
			coalesce(seq_tup_read, 0) AS seq_tup_read, \
			coalesce(idx_scan, 0) AS idx, \
			coalesce(idx_tup_fetch, 0) AS idx_tup_fetch \
		FROM pg_stat_user_tables;"

	<Result>
		Type "counter"
		Metric "pg_scan_seq_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "seq"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_scan_seq_tup_read_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "seq_tup_read"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_scan_idx_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "idx"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_scan_idx_tup_fetch_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "idx_tup_fetch"
	</Result>
</Query>

<Query table_states_by_table>
	Statement "SELECT schemaname, relname, \
			n_live_tup AS live, n_dead_tup AS dead \
		FROM pg_stat_user_tables;"

	<Result>
		Type "gauge"
		Metric "pg_n_tup_live"
		LabelsFrom "schemaname" "relname"
		ValueFrom "live"
	</Result>
	<Result>
		Type "gauge"
		Metric "pg_n_tup_dead"
		LabelsFrom "schemaname" "relname"
		ValueFrom "dead"
	</Result>

	MinVersion 80300
</Query>

<Query disk_io>
	Statement "SELECT coalesce(sum(heap_blks_read), 0) AS heap_read, \
			coalesce(sum(heap_blks_hit), 0) AS heap_hit, \
			coalesce(sum(idx_blks_read), 0) AS idx_read, \
			coalesce(sum(idx_blks_hit), 0) AS idx_hit, \
			coalesce(sum(toast_blks_read), 0) AS toast_read, \
			coalesce(sum(toast_blks_hit), 0) AS toast_hit, \
			coalesce(sum(tidx_blks_read), 0) AS tidx_read, \
			coalesce(sum(tidx_blks_hit), 0) AS tidx_hit \
		FROM pg_statio_user_tables;"

	<Result>
		Type "counter"
		Metric "pg_blks_heap_read_total"
		ValueFrom "heap_read"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_heap_hit_total"
		ValueFrom "heap_hit"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_idx_read_total"
		ValueFrom "idx_read"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_idx_hit_total"
		ValueFrom "idx_hit"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_toast_read_total"
		ValueFrom "toast_read"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_toast_hit_total"
		ValueFrom "toast_hit"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_tidx_read_total"
		ValueFrom "tidx_read"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_tidx_hit_total"
		ValueFrom "tidx_hit"
	</Result>
</Query>

<Query disk_io_by_table>
	Statement "SELECT schemaname, relname, \
			coalesce(heap_blks_read, 0) AS heap_read, \
			coalesce(heap_blks_hit, 0) AS heap_hit, \
			coalesce(idx_blks_read, 0) AS idx_read, \
			coalesce(idx_blks_hit, 0) AS idx_hit, \
			coalesce(toast_blks_read, 0) AS toast_read, \
			coalesce(toast_blks_hit, 0) AS toast_hit, \
			coalesce(tidx_blks_read, 0) AS tidx_read, \
			coalesce(tidx_blks_hit, 0) AS tidx_hit \
		FROM pg_statio_user_tables;"

	<Result>
		Type "counter"
		Metric "pg_blks_heap_read_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "heap_read"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_heap_hit_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "heap_hit"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_idx_read_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "idx_read"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_idx_hit_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "idx_hit"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_toast_read_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "toast_read"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_toast_hit_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "toast_hit"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_tidx_read_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "tidx_read"
	</Result>
	<Result>
		Type "counter"
		Metric "pg_blks_tidx_hit_total"
		LabelsFrom "schemaname" "relname"
		ValueFrom "tidx_hit"
	</Result>
</Query>

<Query disk_usage>
	Statement "SELECT pg_database_size($1) AS size;"

	Param database

	<Result>
		Type "gauge"
		Metric "pg_db_size"
		ValueFrom "size"
	</Result>
</Query>

# vim: set ft=config :
