env:
  LANG: C
  CIRRUS_CLONE_DEPTH: 1
  CIRRUS_CLONE_SUBMODULES: false
  DEFAULT_CONFIG_OPTS: --enable-compatibility-mode --enable-debug --without-libstatgrab --disable-dependency-tracking

###
# Misc non-standard build environment & options on most recent released debian
# version.
# Some are expected to fail, others should always pass
clang_pedantic_task:
  container:
    image: collectd/ci:debian12
    # build using clang with a collection of strict build flags, will most
    # probably always fail
  allow_failures: true
  skip_notifications: true
  env:
    VALGRIND_OPTS: "--errors-for-leak-kinds=definite"
    CFLAGS: >-
      -gdwarf-4
      -Wno-error
      -Wall
      -Wextra
      -Wformat=2
      -Wformat-security
      -Wformat-nonliteral
      -Wmissing-include-dirs
      -Wold-style-definition
      -Wpointer-arith
      -Winit-self
      -Wmissing-prototypes
      -Wimplicit-function-declaration
      -Wmissing-declarations
      -Wmissing-noreturn
      -Wshadow
      -Wendif-labels
      -Wwrite-strings
      -Wno-unused-parameter
      -Wno-missing-field-initializers
      -Wdate-time
      -Wnested-externs
      -Wno-typedef-redefinition
      -Wno-gnu-variable-sized-type-not-at-end
  git_submodule_script:
    - git submodule init -- opentelemetry-proto
    - git submodule update -- opentelemetry-proto
  configure_script:
    - ./build.sh
    - clang --version
    - ./configure CC=clang CXX=clang++ $DEFAULT_CONFIG_OPTS
  build_script:
    - make -j$(nproc) -sk CFLAGS="${CFLAGS} -Werror=strict-prototypes"
  tests_script:
    - make -j$(nproc) check CFLAGS="${CFLAGS} -Werror=strict-prototypes"
  always:
    make_check_artifacts:
      path: "**/*.log"

###
# Build using a range of compilers, available in debian/unstable. NB: might
# fail because of changes to the distro, not the compiler used.
#
bleeding_edge_compilers_task:
  container:
    image: collectd/ci:debian_unstable
  only_if: $CIRRUS_BRANCH == 'main'
  allow_failures: true
  skip_notifications: true
  env:
    matrix:
      CC: gcc-10
      CC: clang
      CC: clang-18
      CC: clang-17
    VALGRIND_OPTS: "--errors-for-leak-kinds=definite"
  git_submodule_script:
    - git submodule init -- opentelemetry-proto
    - git submodule update -- opentelemetry-proto
  configure_script:
    - ./build.sh
    - $CC --version
    - >
      ./configure ${DEFAULT_CONFIG_OPTS}
      CC="$CC"
      CFLAGS="$(dpkg-buildflags --get CFLAGS)"
      CPPLAGS="$(dpkg-buildflags --get CPPFLAGS)"
      LDFLAGS="$(dpkg-buildflags --get LDFLAGS)"
  build_script:
    - make -j$(nproc) -sk CFLAGS="$(dpkg-buildflags --get CFLAGS) -Werror=strict-prototypes"
  tests_script:
    - make -j$(nproc) check CFLAGS="$(dpkg-buildflags --get CFLAGS) -Werror=strict-prototypes"
  always:
    make_check_artifacts:
      path: "**/*.log"

FreeBSD_task:
  freebsd_instance:
    matrix:
      - image_family: freebsd-13-5
  allow_failures: false
  env:
    VALGRIND_OPTS: "--errors-for-leak-kinds=definite"
  pkg_install_script:
    - >
      pkg install --yes
      git
      autotools
      bison
      flex
      pkgconf
  git_submodule_script:
    - git submodule init -- opentelemetry-proto
    - git submodule update -- opentelemetry-proto
  configure_script:
    - ./build.sh
    - ./configure ${DEFAULT_CONFIG_OPTS} --disable-perl
  build_script:
    - make -j$(nproc) -sk CFLAGS="${CFLAGS} -Werror=strict-prototypes"
  tests_script:
    - make -j$(nproc) check CFLAGS="${CFLAGS} -Werror=strict-prototypes"
  always:
    make_check_artifacts:
      path: "**/*.log"

MacOS_task:
  macos_instance:
    matrix:
      - image: ghcr.io/cirruslabs/macos-sonoma-xcode:latest
  allow_failures: false
  git_submodule_script:
    - git submodule init -- opentelemetry-proto
    - git submodule update -- opentelemetry-proto
  brew_install_script:
    - >
      brew install
      autoconf automake
      libtool
      bison
      flex
      pkg-config
  configure_script:
    - ./build.sh
    - ./configure ${DEFAULT_CONFIG_OPTS}
  build_script:
    - make -j "${CIRRUS_CPU}" -sk CFLAGS="${CFLAGS} -Werror=strict-prototypes"
  tests_script:
    - make -j "${CIRRUS_CPU}" -sk check CFLAGS="${CFLAGS} -Werror=strict-prototypes"
  always:
    make_check_artifacts:
      path: "**/*.log"
